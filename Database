from sqlalchemy import create_engine, Column, Integer, String, Text, TIMESTAMP, ForeignKey, Table, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker

Base = declarative_base()

# --- 定义多对多关联表 ---
# project_supervisor 表：关联 projects 和 supervisors
project_supervisor = Table(
    'project_supervisor', Base.metadata,
    Column('project_id', Integer, ForeignKey('projects.project_id', ondelete="CASCADE"), primary_key=True),
    Column('supervisor_id', Integer, ForeignKey('supervisors.supervisor_id', ondelete="CASCADE"), primary_key=True)
)

# student_project 表：关联 students 与 projects
student_project = Table(
    'student_project', Base.metadata,
    Column('student_id', Integer, ForeignKey('students.student_id', ondelete="CASCADE"), primary_key=True),
    Column('project_id', Integer, ForeignKey('projects.project_id', ondelete="CASCADE"), primary_key=True)
)

# group_student 表：关联 groups 与 students
group_student = Table(
    'group_student', Base.metadata,
    Column('group_id', Integer, ForeignKey('groups.group_id', ondelete="CASCADE"), primary_key=True),
    Column('student_id', Integer, ForeignKey('students.student_id', ondelete="CASCADE"), primary_key=True)
)


# --- 定义 ORM 模型 ---

class User(Base):
    __tablename__ = 'users'
    user_id = Column(Integer, primary_key=True)
    first_name = Column(String(50), nullable=False)
    last_name = Column(String(50), nullable=False)
    email = Column(String(100), unique=True, nullable=False)
    password = Column(String(255), nullable=False)
    user_group_identifier = Column(String(50))
    created_at = Column(TIMESTAMP, server_default=func.current_timestamp())
    updated_at = Column(TIMESTAMP, server_default=func.current_timestamp(), onupdate=func.current_timestamp())

    # 和 Student、Supervisor 的一对一关系
    student = relationship("Student", uselist=False, back_populates="user")
    supervisor = relationship("Supervisor", uselist=False, back_populates="user")


class Student(Base):
    __tablename__ = 'students'
    # 主键和外键都指向 users.user_id
    student_id = Column(Integer, ForeignKey('users.user_id', ondelete="CASCADE"), primary_key=True)
    major = Column(String(100))
    interest_research_topic = Column(Text)
    faculty = Column(String(100))

    # 关联 User 对象
    user = relationship("User", back_populates="student")
    # 多对多：Student 与 Project、Group 之间的关系
    projects = relationship("Project", secondary=student_project, back_populates="students")
    groups = relationship("Group", secondary=group_student, back_populates="students")


class Supervisor(Base):
    __tablename__ = 'supervisors'
    # 主键和外键指向 users.user_id
    supervisor_id = Column(Integer, ForeignKey('users.user_id', ondelete="CASCADE"), primary_key=True)
    expertise_research_area = Column(Text)
    max_quota = Column(Integer)

    # 关联 User 对象
    user = relationship("User", back_populates="supervisor")
    # 多对多：Supervisor 与 Project 之间的关系
    projects = relationship("Project", secondary=project_supervisor, back_populates="supervisors")


class Project(Base):
    __tablename__ = 'projects'
    project_id = Column(Integer, primary_key=True, autoincrement=True)
    description = Column(Text)
    project_type = Column(String(50))
    start_time = Column(TIMESTAMP)
    end_time = Column(TIMESTAMP)

    # 多对多关系：与 Supervisor 和 Student 的关系
    supervisors = relationship("Supervisor", secondary=project_supervisor, back_populates="projects")
    students = relationship("Student", secondary=student_project, back_populates="projects")


class Group(Base):
    __tablename__ = 'groups'
    group_id = Column(Integer, primary_key=True, autoincrement=True)
    method = Column(String(50))

    # 多对多：Group 与 Student 的关系
    students = relationship("Student", secondary=group_student, back_populates="groups")
